# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: .NET

on:
  push:
    branches: [ "main", "workflow-tests" ]
  pull_request:
    branches: [ "main" ]

jobs:
  #build:
  #  runs-on: ubuntu-latest
  #  container: mcr.microsoft.com/dotnet/sdk:8.0
  #  steps:
  #  - uses: actions/checkout@v4
  #  - name: Build
  #    run: dotnet build -c Release
  #  - name: Upload Build
  #    uses: actions/upload-artifact@v4
  #    with:
  #      name: build
  #      path: |
  #        **/obj/**
  #        **/bin/**

  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: |
            8.0.x
            6.0.x
            3.1.x
    - name: Test .NET 6.0
      run: dotnet test -f net6.0 --no-build --verbosity normal
    - name: Test .NETCoreApp 3.1
      run: dotnet test -f netcoreapp3.1 --no-build --verbosity normal
    - name: Setup Mono
      run: |
        sudo apt install ca-certificates gnupg -y
        sudo gpg --homedir /tmp --no-default-keyring --keyring /usr/share/keyrings/mono-official-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys 3FA7E0328081BFF6A14DA29AA6A19B38D3D831EF
        echo "deb [signed-by=/usr/share/keyrings/mono-official-archive-keyring.gpg] https://download.mono-project.com/repo/ubuntu stable-focal main" | sudo tee /etc/apt/sources.list.d/mono-official-stable.list
        sudo apt update -y
        sudo apt install mono-devel -y
    - name: Test .NET Framework 4.7.2 with Mono 5.4
      run: dotnet test -f net472 --no-build --verbosity normal

  publish:
    name: Publish
    if: ${{ github.ref_type == 'tag' }}
    runs-on: ubuntu-latest
    container: mcr.microsoft.com/dotnet/sdk:8.0
    steps:
      - uses: actions/checkout@v4
      #- name: Setup .NET
      #  uses: actions/setup-dotnet@v4
      #  with:
      #    dotnet-version: 8.0.x
      - name: Build
        run: dotnet build -c Release --nologo
      - name: Get SmiteLib.Framework Package
        id: smitelib-framework-package
        run: |
          json=`dotnet build SmiteLib.Framework/SmiteLib.Framework.csproj -getProperty:Version,PackageId -getTargetResult:GetPackage -c Release`
          echo json=$json >> $GITHUB_OUTPUT
      - name: Get SmiteLib.Injection Package
        id: smitelib-injection-package
        run: |
          json=`dotnet build SmiteLib.Injection/SmiteLib.Injection.csproj -getProperty:Version,PackageId -getTargetResult:GetPackage -c Release`
          echo json=$json >> $GITHUB_OUTPUT
      - name: Get SmiteLib Package
        id: smitelib-package
        run: |
          json=`dotnet build SmiteLib-Package/SmiteLib-Package.csproj -getProperty:Version,PackageId -getTargetResult:GetPackage -c Release`
          echo json=$json >> $GITHUB_OUTPUT
      - name: Get SmiteLib.VisualStudio.TestAdapter Package
        id: smitelib-visualstudio-testadapter-package
        run: |
          json=`dotnet build SmiteLib.VisualStudio.TestAdapter/SmiteLib.VisualStudio.TestAdapter.csproj -getProperty:Version,PackageId -getTargetResult:GetPackage -c Release`
          echo json=$json >> $GITHUB_OUTPUT
      - name: Push All Packages
        run: dotnet nuget push $nupkgs -s nuget.org -k ${{secrets.NUGET_APIKEY}} --skip-duplicate
        env:
          nupkgs:
            ${{ fromJson(steps.smitelib-framework-package.outputs.json).TargetResults.GetPackage.Items[0].FullPath }}
            ${{ fromJson(steps.smitelib-injection-package.outputs.json).TargetResults.GetPackage.Items[0].FullPath }}
            ${{ fromJson(steps.smitelib-package.outputs.json).TargetResults.GetPackage.Items[0].FullPath }}
            ${{ fromJson(steps.smitelib-visualstudio-testadapter-package.outputs.json).TargetResults.GetPackage.Items[0].FullPath }}

      
